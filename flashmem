#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <Preferences.h>  // Thư viện để lưu vào flash
#include "time.h"
#include <ArduinoJson.h>  // Cài thư viện ArduinoJson qua Library Manager

// ====== WiFi cấu hình tại đây ======
const char* ssid = "Ten-WiFi-Nha-Ban";      // đổi thành tên WiFi của bạn
const char* password = "MatKhauWiFi";       // đổi thành mật khẩu WiFi

// ====== NTP (giờ Việt Nam) ======
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 7 * 3600;  // múi giờ VN
const int daylightOffset_sec = 0;

// ====== Web server ======
AsyncWebServer server(80);

// ====== Nhóm A: 4 relay điều khiển bằng app ======
const int relayPinsA[4] = {16, 17, 18, 19};
bool relayAState[4] = {false, false, false, false};

// ====== Nhóm B: cảm biến + relay ======
const int pirPin = 34;   // cảm biến PIR
const int relayB = 13;   // relay nhóm B
bool relayBState = false;

unsigned long lastMotionTime = 0;

// ====== Preferences để lưu trữ dữ liệu ======
Preferences prefs;

void setup() {
  Serial.begin(115200);

  // Khởi tạo Preferences
  prefs.begin("tasks", false); // Namespace "tasks" để lưu dữ liệu
  Serial.println("Preferences đã khởi tạo.");

  // Setup relay nhóm A
  for (int i = 0; i < 4; i++) {
    pinMode(relayPinsA[i], OUTPUT);
    digitalWrite(relayPinsA[i], LOW);
  }

  // Setup nhóm B
  pinMode(pirPin, INPUT);
  pinMode(relayB, OUTPUT);
  digitalWrite(relayB, LOW);

  // Kết nối WiFi
  WiFi.begin(ssid, password);
  Serial.print("Đang kết nối WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nĐã kết nối WiFi");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  // Cấu hình NTP
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  // ====== API CRUD cho Database (Preferences) ======

  // CREATE: Thêm task mới (POST /api/tasks)
  server.on("/api/tasks", HTTP_POST, [](AsyncWebServerRequest *request) {
    if (request->hasArg("plain")) {
      String body = request->arg("plain");
      DynamicJsonDocument doc(1024);
      deserializeJson(doc, body);

      String name = doc["name"].as<String>();
      bool completed = doc["completed"];

      // Lấy ID mới
      int newId = prefs.getInt("nextId", 1); // Nếu chưa có, bắt đầu từ 1

      // Lưu task mới
      String key = "task_" + String(newId);
      DynamicJsonDocument taskDoc(512);
      taskDoc["id"] = newId;
      taskDoc["name"] = name;
      taskDoc["completed"] = completed;
      String taskJson;
      serializeJson(taskDoc, taskJson);
      prefs.putString(key.c_str(), taskJson);

      // Cập nhật nextId
      prefs.putInt("nextId", newId + 1);

      request->send(201, "application/json", "{\"message\":\"Task created\",\"id\":" + String(newId) + "}");
    } else {
      request->send(400, "text/plain", "Missing body");
    }
  });

  // READ: Xem tất cả tasks (GET /api/tasks)
  server.on("/api/tasks", HTTP_GET, [](AsyncWebServerRequest *request) {
    DynamicJsonDocument doc(2048);
    JsonArray tasks = doc.to<JsonArray>();

    // Lấy tất cả keys từ Preferences
    int nextId = prefs.getInt("nextId", 1);
    for (int id = 1; id < nextId; id++) {
      String key = "task_" + String(id);
      if (prefs.isKey(key.c_str())) {
        String taskJson = prefs.getString(key.c_str());
        DynamicJsonDocument taskDoc(512);
        deserializeJson(taskDoc, taskJson);
        tasks.add(taskDoc);
      }
    }

    String response;
    serializeJson(tasks, response);
    request->send(200, "application/json", response);
  });

  // READ one: Xem task theo ID (GET /api/tasks/:id)
  server.on("/api/tasks/(\\d+)", HTTP_GET, [](AsyncWebServerRequest *request) {
    int id = request->url().substring(11).toInt();
    String key = "task_" + String(id);
    if (prefs.isKey(key.c_str())) {
      String taskJson = prefs.getString(key.c_str());
      request->send(200, "application/json", taskJson);
    } else {
      request->send(404, "text/plain", "Task not found");
    }
  });

  // UPDATE: Cập nhật task (PUT /api/tasks/:id)
  server.on("/api/tasks/(\\d+)", HTTP_PUT, [](AsyncWebServerRequest *request) {
    if (request->hasArg("plain")) {
      int id = request->url().substring(11).toInt();
      String key = "task_" + String(id);
      if (prefs.isKey(key.c_str())) {
        String body = request->arg("plain");
        DynamicJsonDocument doc(512);
        deserializeJson(doc, body);
        doc["id"] = id; // Giữ nguyên ID
        String taskJson;
        serializeJson(doc, taskJson);
        prefs.putString(key.c_str(), taskJson);
        request->send(200, "application/json", "{\"message\":\"Task updated\"}");
      } else {
        request->send(404, "text/plain", "Task not found");
      }
    } else {
      request->send(400, "text/plain", "Missing body");
    }
  });

  // DELETE: Xóa task (DELETE /api/tasks/:id)
  server.on("/api/tasks/(\\d+)", HTTP_DELETE, [](AsyncWebServerRequest *request) {
    int id = request->url().substring(11).toInt();
    String key = "task_" + String(id);
    if (prefs.isKey(key.c_str())) {
      prefs.remove(key.c_str());
      request->send(200, "text/plain", "Task deleted");
    } else {
      request->send(404, "text/plain", "Task not found");
    }
  });

  // ====== API cũ cho relay (giữ nguyên) ======
  server.on("/relay", HTTP_GET, [](AsyncWebServerRequest *request){
    if (request->hasParam("id") && request->hasParam("state")) {
      int id = request->getParam("id")->value().toInt();
      int state = request->getParam("state")->value().toInt();

      if (id >= 0 && id < 4) { // Nhóm A
        relayAState[id] = state;
        digitalWrite(relayPinsA[id], relayAState[id] ? HIGH : LOW);
        request->send(200, "text/plain", "Relay A updated");
        return;
      }

      if (id == 5) { // Nhóm B (trước 23h)
        relayBState = state;
        digitalWrite(relayB, relayBState ? HIGH : LOW);
        request->send(200, "text/plain", "Relay B updated");
        return;
      }
    }
    request->send(400, "text/plain", "Invalid params");
  });

  server.begin();
  Serial.println("Server đã khởi động. Truy cập http://<IP>/api/tasks để xem dữ liệu.");
}

void loop() {
  // ====== Phần loop cũ cho PIR (giữ nguyên) ======
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Không lấy được thời gian");
    delay(1000);
    return;
  }
  int hour = timeinfo.tm_hour;

  // Sau 23h: bật chế độ cảm biến
  if (hour >= 23) {
    int pirValue = digitalRead(pirPin);

    if (pirValue == HIGH) {
      lastMotionTime = millis();
      digitalWrite(relayB, HIGH);
      relayBState = true;
    }

    if (relayBState) {
      if (millis() - lastMotionTime > 5UL * 60UL * 1000UL) { // hết 5 phút
        unsigned long checkStart = millis();
        bool stillMotion = false;

        while (millis() - checkStart < 60UL * 1000UL) { // kiểm tra thêm 1 phút
          if (digitalRead(pirPin) == HIGH) {
            stillMotion = true;
            break;
          }
          delay(100);
        }

        if (stillMotion) {
          lastMotionTime = millis(); // reset lại 5 phút
        } else {
          digitalWrite(relayB, LOW);
          relayBState = false;
        }
      }
    }
  }
  // Trước 23h: nhóm B chỉ điều khiển bằng app

  delay(100);  // Tránh loop quá nhanh
}
